{
	"info": {
		"_postman_id": "839f8b7e-d61c-4499-913f-6c789dfbbd45",
		"name": "Dassana API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Core APIs",
			"item": [
				{
					"name": "Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api-gateway-url}}/ping",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run All Workflows (do not include orignal json)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-dassana-cache",
								"value": "false",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{alert-json}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway-url}}/run?includeInputRequest=false",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"run"
							],
							"query": [
								{
									"key": "includeInputRequest",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Run All Workflows (include original json)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-dassana-cache",
								"value": "{{x-dassana-cache}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{alert-json}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway-url}}/run?includeInputRequest=true",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"run"
							],
							"query": [
								{
									"key": "includeInputRequest",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Workflow Output",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-dassana-cache",
								"value": "{{x-dassana-cache}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{alert-json}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway-url}}/run?workflowId=demo-cloud-resource-context&includeStepOutput=true",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"run"
							],
							"query": [
								{
									"key": "workflowId",
									"value": "demo-cloud-resource-context"
								},
								{
									"key": "includeStepOutput",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Workflow By ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-dassana-cache",
								"value": "{{x-dassana-cache}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api-gateway-url}}/workflows?workflowId=foo-cloud-normalize",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"workflows"
							],
							"query": [
								{
									"key": "workflowId",
									"value": "foo-cloud-normalize"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"installedVersion\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway-url}}/version",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch Fubar From S3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"dassana\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-gateway-url}}/alert?vendorId=foo-cloud-cspm-vendor&alertId=demo-alert-id",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"alert"
							],
							"query": [
								{
									"key": "vendorId",
									"value": "foo-cloud-cspm-vendor"
								},
								{
									"key": "alertId",
									"value": "demo-alert-id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch Alert From S3 with wrong alertId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"OutPut is Json\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-gateway-url}}/alert?vendorId=aws-guardduty&alertId=92be33c9c933159cc5e8eed7a7d42af",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"alert"
							],
							"query": [
								{
									"key": "vendorId",
									"value": "aws-guardduty"
								},
								{
									"key": "alertId",
									"value": "92be33c9c933159cc5e8eed7a7d42af"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "AWS Config S3 Bucket Hosting Website",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Bucket has associated website\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"dassana-bucket-with-website.s3-website-us-west-1.amazonaws.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json;charset=UTF-8",
								"type": "text"
							},
							{
								"key": "accept-language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8",
								"type": "text"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"SchemaVersion\": \"2018-10-08\",\n  \"Id\": \"arn:aws:securityhub:us-west-1:536600094836:subscription/aws-foundational-security-best-practices/v/1.0.0/S3.2/finding/b78c0b5a-4500-407a-b591-1c6c0dccde9d\",\n  \"ProductArn\": \"arn:aws:securityhub:us-west-1::product/aws/securityhub\",\n  \"ProductName\": \"Security Hub\",\n  \"CompanyName\": \"AWS\",\n  \"Region\": \"us-west-1\",\n  \"GeneratorId\": \"aws-foundational-security-best-practices/v/1.0.0/S3.2\",\n  \"AwsAccountId\": \"536600094836\",\n  \"Types\": [\n    \"Effects/Data Exposure/AWS-Foundational-Security-Best-Practices\"\n  ],\n  \"FirstObservedAt\": \"2021-10-05T21:00:36.991Z\",\n  \"LastObservedAt\": \"2021-10-05T21:00:40.906Z\",\n  \"CreatedAt\": \"2021-10-05T21:00:36.991Z\",\n  \"UpdatedAt\": \"2021-10-05T21:00:36.991Z\",\n  \"Severity\": {\n    \"Product\": 90,\n    \"Label\": \"CRITICAL\",\n    \"Normalized\": 90,\n    \"Original\": \"CRITICAL\"\n  },\n  \"Title\": \"S3.2 S3 buckets should prohibit public read access\",\n  \"Description\": \"This AWS control checks whether your S3 buckets allow public read access by evaluating the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).\",\n  \"Remediation\": {\n    \"Recommendation\": {\n      \"Text\": \"For directions on how to fix this issue, consult the AWS Security Hub Foundational Security Best Practices documentation.\",\n      \"Url\": \"https://docs.aws.amazon.com/console/securityhub/S3.2/remediation\"\n    }\n  },\n  \"ProductFields\": {\n    \"StandardsArn\": \"arn:aws:securityhub:::standards/aws-foundational-security-best-practices/v/1.0.0\",\n    \"StandardsSubscriptionArn\": \"arn:aws:securityhub:us-west-1:536600094836:subscription/aws-foundational-security-best-practices/v/1.0.0\",\n    \"ControlId\": \"S3.2\",\n    \"RecommendationUrl\": \"https://docs.aws.amazon.com/console/securityhub/S3.2/remediation\",\n    \"RelatedAWSResources:0/name\": \"securityhub-s3-bucket-public-read-prohibited-8a52d554\",\n    \"RelatedAWSResources:0/type\": \"AWS::Config::ConfigRule\",\n    \"StandardsControlArn\": \"arn:aws:securityhub:us-west-1:536600094836:control/aws-foundational-security-best-practices/v/1.0.0/S3.2\",\n    \"aws/securityhub/ProductName\": \"Security Hub\",\n    \"aws/securityhub/CompanyName\": \"AWS\",\n    \"aws/securityhub/annotation\": \"The S3 bucket policy allows public read access.\",\n    \"Resources:0/Id\": \"arn:aws:s3:::dassana-bucket-with-website\",\n    \"aws/securityhub/FindingId\": \"arn:aws:securityhub:us-west-1::product/aws/securityhub/arn:aws:securityhub:us-west-1:536600094836:subscription/aws-foundational-security-best-practices/v/1.0.0/S3.2/finding/b78c0b5a-4500-407a-b591-1c6c0dccde9d\"\n  },\n  \"Resources\": [\n    {\n      \"Type\": \"AwsS3Bucket\",\n      \"Id\": \"arn:aws:s3:::dassana-bucket-with-website\",\n      \"Partition\": \"aws\",\n      \"Region\": \"us-west-1\",\n      \"Details\": {\n        \"AwsS3Bucket\": {\n          \"OwnerId\": \"e358b1b3d851d3086189a3836f73e8f16a4f9828702564be894412ae7bc4e03c\",\n          \"CreatedAt\": \"2021-10-05T20:49:47.000Z\"\n        }\n      }\n    }\n  ],\n  \"Compliance\": {\n    \"Status\": \"FAILED\"\n  },\n  \"WorkflowState\": \"NEW\",\n  \"Workflow\": {\n    \"Status\": \"NEW\"\n  },\n  \"RecordState\": \"ACTIVE\",\n  \"FindingProviderFields\": {\n    \"Severity\": {\n      \"Label\": \"CRITICAL\",\n      \"Original\": \"CRITICAL\"\n    },\n    \"Types\": [\n      \"Effects/Data Exposure/AWS-Foundational-Security-Best-Practices\"\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway-url}}/run?includeInputRequest=false&includeStepOutput=true",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"run"
							],
							"query": [
								{
									"key": "includeInputRequest",
									"value": "false"
								},
								{
									"key": "includeStepOutput",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Prisma S3 Bucket with Static Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const alertClassification = pm.response.json().dassana.normalize.output.alertClassification;\r",
									"pm.test(\"Alert classified correctly\", function() {\r",
									"    pm.expect(alertClassification.subclass).to.eql(\"config\");\r",
									"    pm.expect(alertClassification.category).to.eql(\"iam\");\r",
									"    pm.expect(alertClassification.subcategory).to.eql(\"public-access\");\r",
									"    pm.expect(alertClassification.class).to.eql(\"risk\");\r",
									"})\r",
									"\r",
									"const stepOutput = pm.response.json().dassana[\"resource-context\"][\"step-output\"]\r",
									"pm.test(\"Bucket policy action works as expected\", function() {\r",
									"    pm.expect(stepOutput[1].bucketPolicy).to.have.all.keys('result');\r",
									"})\r",
									"\r",
									"pm.test(\"Website context action retrieves website url\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"dassana-bucket-with-website.s3-website-us-west-1.amazonaws.com\");\r",
									"});\r",
									"\r",
									"const generalRisk = pm.response.json().dassana[\"general-context\"][\"risk\"]\r",
									"pm.test(\"General context risk is correct\", function() {\r",
									"    pm.expect(generalRisk.riskValue).to.eql(\"high\");\r",
									"})\r",
									"\r",
									"const resourceRisk = pm.response.json().dassana[\"resource-context\"][\"risk\"]\r",
									"pm.test(\"Resource context risk is correct\", function() {\r",
									"    pm.expect(resourceRisk.riskValue).to.eql(\"\");\r",
									"})\r",
									"\r",
									"const policyRisk = pm.response.json().dassana[\"policy-context\"][\"risk\"]\r",
									"pm.test(\"Policy context risk is correct\", function() {\r",
									"    pm.expect(policyRisk.riskValue).to.eql(\"low\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"alertStatus\": \"open\",\r\n  \"reason\": \"SCHEDULED\",\r\n  \"resourceId\": \"dassana-bucket-with-website\",\r\n  \"alertRuleName\": \"PC to Dassana to Splunk\",\r\n  \"alertRemediationImpact\": null,\r\n  \"accountName\": \"P Personal\",\r\n  \"hasFinding\": false,\r\n  \"resourceRegionId\": \"us-west-1\",\r\n  \"alertRemediationCli\": null,\r\n  \"source\": \"Prisma Cloud\",\r\n  \"cloudType\": \"aws\",\r\n  \"complianceMetadata\": [\r\n    {\r\n      \"requirementName\": \"Collection\",\r\n      \"standardName\": \"MITRE ATT&CK v6.3\",\r\n      \"requirementId\": \"TA0009\"\r\n    },\r\n    {\r\n      \"requirementName\": \"Principle 1 - Accountability\",\r\n      \"standardName\": \"PIPEDA\",\r\n      \"requirementId\": \"4.1\"\r\n    },\r\n    {\r\n      \"requirementName\": \"Technology Operations Management\",\r\n      \"standardName\": \"Risk Management in Technology (RMiT)\",\r\n      \"requirementId\": \"10\"\r\n    },\r\n    {\r\n      \"requirementName\": \"California Civil Code Section 1798.150\",\r\n      \"standardName\": \"CCPA 2018\",\r\n      \"requirementId\": \"1798.150\"\r\n    },\r\n    {\r\n      \"requirementName\": \"ACCESS CONTROL\",\r\n      \"standardName\": \"NIST 800-53 Rev 5\",\r\n      \"requirementId\": \"AC\"\r\n    }\r\n  ],\r\n  \"callbackUrl\": \"https://app2.prismacloud.io/alerts/overview?filters#alert.id[0]=P-1695&timeRange[type]=to_now&timeRange[value]=epoch\",\r\n  \"alertId\": \"P-1695\",\r\n  \"policyLabels\": [],\r\n  \"alertAttribution\": {},\r\n  \"severity\": \"high\",\r\n  \"policyName\": \"AWS S3 Bucket has Global GET Permissions enabled via bucket policy\",\r\n  \"resource\": {\r\n    \"data\": {\r\n      \"owner\": {\r\n        \"displayName\": \"gk+parthaws\",\r\n        \"id\": \"97042e15a6ef94fc6ebc1f124101cc6c8284bb85f4d32ecbd6d943bed1884811\"\r\n      },\r\n      \"tags\": [\r\n        {\r\n          \"value\": \"prod\",\r\n          \"key\": \"env\"\r\n        }\r\n      ],\r\n      \"bucketName\": \"dassana-bucket-with-website\",\r\n      \"denyUnencryptedUploadsPolicies\": [],\r\n      \"accountLevelPublicAccessBlockConfiguration\": {\r\n        \"blockPublicPolicy\": false,\r\n        \"restrictPublicBuckets\": false,\r\n        \"blockPublicAcls\": false,\r\n        \"ignorePublicAcls\": false\r\n      },\r\n      \"acl\": {\r\n        \"owner\": {\r\n          \"displayName\": \"gk+parthaws\",\r\n          \"id\": \"97042e15a6ef94fc6ebc1f124101cc6c8284bb85f4d32ecbd6d943bed1884811\"\r\n        },\r\n        \"grants\": [\r\n          {\r\n            \"grantee\": {\r\n              \"identifier\": \"97042e15a6ef94fc6ebc1f124101cc6c8284bb85f4d32ecbd6d943bed1884811\",\r\n              \"displayName\": \"gk+parthaws\",\r\n              \"typeIdentifier\": \"id\"\r\n            },\r\n            \"permission\": \"FullControl\"\r\n          }\r\n        ],\r\n        \"grantsAsList\": [\r\n          {\r\n            \"grantee\": {\r\n              \"identifier\": \"97042e15a6ef94fc6ebc1f124101cc6c8284bb85f4d32ecbd6d943bed1884811\",\r\n              \"displayName\": \"gk+parthaws\",\r\n              \"typeIdentifier\": \"id\"\r\n            },\r\n            \"permission\": \"FullControl\"\r\n          }\r\n        ],\r\n        \"requesterCharged\": false\r\n      },\r\n      \"creationDate\": \"2021-08-26T17:20:25.000Z\",\r\n      \"policyStatus\": {\r\n        \"isPublic\": true\r\n      },\r\n      \"sseAlgorithm\": \"None\",\r\n      \"loggingConfiguration\": {\r\n        \"targetGrants\": [\r\n          {\r\n            \"grantee\": {\r\n              \"identifier\": \"97042e15a6ef94fc6ebc1f124101cc6c8284bb85f4d32ecbd6d943bed1884811\",\r\n              \"displayName\": \"gk+parthaws\",\r\n              \"typeIdentifier\": \"id\"\r\n            },\r\n            \"permission\": \"FullControl\"\r\n          }\r\n        ]\r\n      },\r\n      \"policyAvailable\": true,\r\n      \"accountId\": \"536600094836\",\r\n      \"websiteConfiguration\": {\r\n        \"indexDocumentSuffix\": \"index.html\",\r\n        \"routingRules\": []\r\n      },\r\n      \"versioningConfiguration\": {\r\n        \"status\": \"Off\"\r\n      },\r\n      \"kmsMasterKeyID\": \"None\",\r\n      \"policy\": {\r\n        \"Version\": \"2012-10-17\",\r\n        \"Statement\": [\r\n          {\r\n            \"Action\": [\r\n              \"s3:GetObject\",\r\n              \"s3:GetObjectVersion\"\r\n            ],\r\n            \"Resource\": \"arn:aws:s3:::dassana-blog-static-site/*\",\r\n            \"Effect\": \"Allow\",\r\n            \"Principal\": \"*\",\r\n            \"Sid\": \"PublicRead\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"resourceTs\": 1631758402352,\r\n    \"url\": \"https://console.aws.amazon.com/s3/buckets/dassana-blog-static-site/?region=us-east-1#\",\r\n    \"rrn\": \"rrn::storageBucket:us-east-1:461092258297::dassana-blog-static-site\",\r\n    \"cloudAccountGroups\": [\r\n      \"Test\"\r\n    ],\r\n    \"accountId\": \"536600094836\",\r\n    \"resourceTags\": {\r\n      \"env\": \"dev\"\r\n    },\r\n    \"regionId\": \"us-west-1\",\r\n    \"cloudType\": \"aws\",\r\n    \"resourceApiName\": \"aws-s3api-get-bucket-acl\",\r\n    \"name\": \"dassana-bucket-with-website\",\r\n    \"additionalInfo\": {},\r\n    \"id\": \"dassana-bucket-with-website\",\r\n    \"region\": \"AWS Virginia\",\r\n    \"account\": \"P Personal\",\r\n    \"resourceType\": \"STORAGE_BUCKET\"\r\n  },\r\n  \"firstSeen\": 1629947769576,\r\n  \"alertRemediationCliDescription\": null,\r\n  \"resourceName\": \"dassana-bucket-with-website\",\r\n  \"alertDismissalNote\": null,\r\n  \"resourceRegion\": \"AWS Virginia\",\r\n  \"tags\": [\r\n    {\r\n      \"value\": \"prod\",\r\n      \"key\": \"env\"\r\n    }\r\n  ],\r\n  \"policyDescription\": \"This policy identifies the S3 Bucket(s) which will allow any unauthenticated user to GET objects from a bucket. These permissions permit anyone, malicious or not, to GET objects from your S3 bucket if they can guess the namespace. Since the S3 service does not protect the namespace other than with ACLs and Bucket Policy, you risk loss or compromise of critical data by leaving this open.\",\r\n  \"policyRecommendation\": \"1. Log into your AWS console and select the S3 service.\\n2. Choose the reported bucket.\\n3. Click Properties in the upper right of the window, and expand the 'Permissions' object.\\n4. Select 'Edit Bucket Policy' and consider defining what explicit 'Principal' should have the ability to GET objects in your S3 bucket. You may also want to specifically limit the 'Principal' ability to perform specific GET functions, without the wild card.\",\r\n  \"accountId\": \"536600094836\",\r\n  \"lastSeen\": 1631764964198,\r\n  \"policyId\": \"f0235acc-737d-4a54-8d2c-a05da32663bd\",\r\n  \"resourceCloudService\": \"Amazon S3\",\r\n  \"alertTs\": 1629947769576,\r\n  \"policyType\": \"config\",\r\n  \"findingSummary\": {},\r\n  \"resourceType\": \"Managed Storage Bucket\",\r\n  \"alertRuleId\": \"bd4c60d0-ed86-4b3f-9074-a98d62a9e740\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway-url}}/run?includeInputRequest=false&includeStepOutput=true",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"run"
							],
							"query": [
								{
									"key": "includeInputRequest",
									"value": "false"
								},
								{
									"key": "includeStepOutput",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Input Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const apiResponse = pm.response.json();",
									"pm.test(\"Include Input Request Parameter works\", function() {",
									"    //Check if alert keys were included along with dassana output",
									"    pm.expect(Object.keys(apiResponse).length).to.be.above(1);",
									"})",
									"",
									"const dassanaResponse = apiResponse.dassana;",
									"pm.test(\"Include Step Output Parameter works\", function() {",
									"    pm.expect(dassanaResponse[\"general-context\"]).to.have.property(\"step-output\");",
									"    pm.expect(dassanaResponse[\"resource-context\"]).to.have.property(\"step-output\");",
									"    pm.expect(dassanaResponse[\"policy-context\"]).to.have.property(\"step-output\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"alertStatus\": \"open\",\n  \"reason\": \"SCHEDULED\",\n  \"resourceId\": \"dassana-bucket-with-website\",\n  \"alertRuleName\": \"PC to Dassana to Splunk\",\n  \"alertRemediationImpact\": null,\n  \"accountName\": \"P Personal\",\n  \"hasFinding\": false,\n  \"resourceRegionId\": \"us-west-1\",\n  \"alertRemediationCli\": null,\n  \"source\": \"Prisma Cloud\",\n  \"cloudType\": \"aws\",\n  \"complianceMetadata\": [\n    {\n      \"requirementName\": \"Collection\",\n      \"standardName\": \"MITRE ATT&CK v6.3\",\n      \"requirementId\": \"TA0009\"\n    },\n    {\n      \"requirementName\": \"Principle 1 - Accountability\",\n      \"standardName\": \"PIPEDA\",\n      \"requirementId\": \"4.1\"\n    },\n    {\n      \"requirementName\": \"Technology Operations Management\",\n      \"standardName\": \"Risk Management in Technology (RMiT)\",\n      \"requirementId\": \"10\"\n    },\n    {\n      \"requirementName\": \"California Civil Code Section 1798.150\",\n      \"standardName\": \"CCPA 2018\",\n      \"requirementId\": \"1798.150\"\n    },\n    {\n      \"requirementName\": \"ACCESS CONTROL\",\n      \"standardName\": \"NIST 800-53 Rev 5\",\n      \"requirementId\": \"AC\"\n    }\n  ],\n  \"callbackUrl\": \"https://app2.prismacloud.io/alerts/overview?filters#alert.id[0]=P-1695&timeRange[type]=to_now&timeRange[value]=epoch\",\n  \"alertId\": \"P-1695\",\n  \"policyLabels\": [],\n  \"alertAttribution\": {},\n  \"severity\": \"high\",\n  \"policyName\": \"AWS S3 Bucket has Global GET Permissions enabled via bucket policy\",\n  \"resource\": {\n    \"data\": {\n      \"owner\": {\n        \"displayName\": \"gk+parthaws\",\n        \"id\": \"97042e15a6ef94fc6ebc1f124101cc6c8284bb85f4d32ecbd6d943bed1884811\"\n      },\n      \"tags\": [\n        {\n          \"value\": \"prod\",\n          \"key\": \"env\"\n        }\n      ],\n      \"bucketName\": \"dassana-bucket-with-website\",\n      \"denyUnencryptedUploadsPolicies\": [],\n      \"accountLevelPublicAccessBlockConfiguration\": {\n        \"blockPublicPolicy\": false,\n        \"restrictPublicBuckets\": false,\n        \"blockPublicAcls\": false,\n        \"ignorePublicAcls\": false\n      },\n      \"acl\": {\n        \"owner\": {\n          \"displayName\": \"gk+parthaws\",\n          \"id\": \"97042e15a6ef94fc6ebc1f124101cc6c8284bb85f4d32ecbd6d943bed1884811\"\n        },\n        \"grants\": [\n          {\n            \"grantee\": {\n              \"identifier\": \"97042e15a6ef94fc6ebc1f124101cc6c8284bb85f4d32ecbd6d943bed1884811\",\n              \"displayName\": \"gk+parthaws\",\n              \"typeIdentifier\": \"id\"\n            },\n            \"permission\": \"FullControl\"\n          }\n        ],\n        \"grantsAsList\": [\n          {\n            \"grantee\": {\n              \"identifier\": \"97042e15a6ef94fc6ebc1f124101cc6c8284bb85f4d32ecbd6d943bed1884811\",\n              \"displayName\": \"gk+parthaws\",\n              \"typeIdentifier\": \"id\"\n            },\n            \"permission\": \"FullControl\"\n          }\n        ],\n        \"requesterCharged\": false\n      },\n      \"creationDate\": \"2021-08-26T17:20:25.000Z\",\n      \"policyStatus\": {\n        \"isPublic\": true\n      },\n      \"sseAlgorithm\": \"None\",\n      \"loggingConfiguration\": {\n        \"targetGrants\": [\n          {\n            \"grantee\": {\n              \"identifier\": \"97042e15a6ef94fc6ebc1f124101cc6c8284bb85f4d32ecbd6d943bed1884811\",\n              \"displayName\": \"gk+parthaws\",\n              \"typeIdentifier\": \"id\"\n            },\n            \"permission\": \"FullControl\"\n          }\n        ]\n      },\n      \"policyAvailable\": true,\n      \"accountId\": \"536600094836\",\n      \"websiteConfiguration\": {\n        \"indexDocumentSuffix\": \"index.html\",\n        \"routingRules\": []\n      },\n      \"versioningConfiguration\": {\n        \"status\": \"Off\"\n      },\n      \"kmsMasterKeyID\": \"None\",\n      \"policy\": {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n          {\n            \"Action\": [\n              \"s3:GetObject\",\n              \"s3:GetObjectVersion\"\n            ],\n            \"Resource\": \"arn:aws:s3:::dassana-blog-static-site/*\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Sid\": \"PublicRead\"\n          }\n        ]\n      }\n    },\n    \"resourceTs\": 1631758402352,\n    \"url\": \"https://console.aws.amazon.com/s3/buckets/dassana-blog-static-site/?region=us-east-1#\",\n    \"rrn\": \"rrn::storageBucket:us-east-1:461092258297::dassana-blog-static-site\",\n    \"cloudAccountGroups\": [\n      \"Test\"\n    ],\n    \"accountId\": \"536600094836\",\n    \"resourceTags\": {\n      \"env\": \"dev\"\n    },\n    \"regionId\": \"us-west-1\",\n    \"cloudType\": \"aws\",\n    \"resourceApiName\": \"aws-s3api-get-bucket-acl\",\n    \"name\": \"dassana-bucket-with-website\",\n    \"additionalInfo\": {},\n    \"id\": \"dassana-bucket-with-website\",\n    \"region\": \"AWS Virginia\",\n    \"account\": \"P Personal\",\n    \"resourceType\": \"STORAGE_BUCKET\"\n  },\n  \"firstSeen\": 1629947769576,\n  \"alertRemediationCliDescription\": null,\n  \"resourceName\": \"dassana-bucket-with-website\",\n  \"alertDismissalNote\": null,\n  \"resourceRegion\": \"AWS Virginia\",\n  \"tags\": [\n    {\n      \"value\": \"prod\",\n      \"key\": \"env\"\n    }\n  ],\n  \"policyDescription\": \"This policy identifies the S3 Bucket(s) which will allow any unauthenticated user to GET objects from a bucket. These permissions permit anyone, malicious or not, to GET objects from your S3 bucket if they can guess the namespace. Since the S3 service does not protect the namespace other than with ACLs and Bucket Policy, you risk loss or compromise of critical data by leaving this open.\",\n  \"policyRecommendation\": \"1. Log into your AWS console and select the S3 service.\\n2. Choose the reported bucket.\\n3. Click Properties in the upper right of the window, and expand the 'Permissions' object.\\n4. Select 'Edit Bucket Policy' and consider defining what explicit 'Principal' should have the ability to GET objects in your S3 bucket. You may also want to specifically limit the 'Principal' ability to perform specific GET functions, without the wild card.\",\n  \"accountId\": \"536600094836\",\n  \"lastSeen\": 1631764964198,\n  \"policyId\": \"f0235acc-737d-4a54-8d2c-a05da32663bd\",\n  \"resourceCloudService\": \"Amazon S3\",\n  \"alertTs\": 1629947769576,\n  \"policyType\": \"config\",\n  \"findingSummary\": {},\n  \"resourceType\": \"Managed Storage Bucket\",\n  \"alertRuleId\": \"bd4c60d0-ed86-4b3f-9074-a98d62a9e740\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway-url}}/run?includeInputRequest=true&includeStepOutput=true",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"run"
							],
							"query": [
								{
									"key": "includeInputRequest",
									"value": "true"
								},
								{
									"key": "includeStepOutput",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AWS Config Security Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const apiResponse = pm.response.json().dassana;",
									"const alertClassification = apiResponse.normalize.output.alertClassification;",
									"pm.test(\"Alert classified correctly\", function() {",
									"    pm.expect(alertClassification.subclass).to.eql(\"config\");",
									"    pm.expect(alertClassification.category).to.eql(\"networking\");",
									"    pm.expect(alertClassification.subcategory).to.eql(\"firewall\");",
									"    pm.expect(alertClassification.class).to.eql(\"risk\");",
									"})",
									"",
									"function eni_action_deep_search(steps) {",
									"    for(i = 0; i < steps.length; i++) {",
									"        var stepOutput = Object.keys(steps[i])[0]",
									"        if(stepOutput == 'list-of-attached-eni') {",
									"            if(steps[i]['list-of-attached-eni']['result'].length > 0) {",
									"                return true",
									"            }",
									"        }",
									"    }",
									"    return false",
									"}",
									"",
									"pm.test(\"Attached ENI Action ran correctly\", function() {",
									"    pm.expect(eni_action_deep_search(apiResponse['policy-context']['step-output'])).to.eql(true)",
									"})",
									"",
									"pm.test(\"Policy Context Risk set correctly\", function() {",
									"    pm.expect(apiResponse['policy-context']['risk']['riskValue']).to.eql('high')",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"SchemaVersion\": \"2018-10-08\",\n  \"Id\": \"arn:aws:securityhub:us-east-1:536600094836:subscription/aws-foundational-security-best-practices/v/1.0.0/EC2.18/finding/1be6c89a-f11d-4a00-ae28-10a16380bd85\",\n  \"ProductArn\": \"arn:aws:securityhub:us-east-1::product/aws/securityhub\",\n  \"ProductName\": \"Security Hub\",\n  \"CompanyName\": \"AWS\",\n  \"Region\": \"us-east-1\",\n  \"GeneratorId\": \"aws-foundational-security-best-practices/v/1.0.0/EC2.18\",\n  \"AwsAccountId\": \"536600094836\",\n  \"Types\": [\n    \"Software and Configuration Checks/Industry and Regulatory Standards/AWS-Foundational-Security-Best-Practices\"\n  ],\n  \"FirstObservedAt\": \"2021-11-26T05:21:44.301Z\",\n  \"LastObservedAt\": \"2021-11-27T01:37:02.857Z\",\n  \"CreatedAt\": \"2021-11-26T05:21:44.301Z\",\n  \"UpdatedAt\": \"2021-11-27T01:36:58.517Z\",\n  \"Severity\": {\n    \"Product\": 70,\n    \"Label\": \"HIGH\",\n    \"Normalized\": 70,\n    \"Original\": \"HIGH\"\n  },\n  \"Title\": \"EC2.18 Security groups should only allow unrestricted incoming traffic for authorized ports\",\n  \"Description\": \"This control checks whether the security groups allow unrestricted incoming traffic. The control fails if ports allow unrestricted traffic on ports other than 80 and 443, which are default values for parameter authorizedTcpPorts.\",\n  \"Remediation\": {\n    \"Recommendation\": {\n      \"Text\": \"For directions on how to fix this issue, consult the AWS Security Hub Foundational Security Best Practices documentation.\",\n      \"Url\": \"https://docs.aws.amazon.com/console/securityhub/EC2.18/remediation\"\n    }\n  },\n  \"ProductFields\": {\n    \"StandardsArn\": \"arn:aws:securityhub:::standards/aws-foundational-security-best-practices/v/1.0.0\",\n    \"StandardsSubscriptionArn\": \"arn:aws:securityhub:us-east-1:536600094836:subscription/aws-foundational-security-best-practices/v/1.0.0\",\n    \"ControlId\": \"EC2.18\",\n    \"RecommendationUrl\": \"https://docs.aws.amazon.com/console/securityhub/EC2.18/remediation\",\n    \"RelatedAWSResources:0/name\": \"securityhub-vpc-sg-open-only-to-authorized-ports-df5d7820\",\n    \"RelatedAWSResources:0/type\": \"AWS::Config::ConfigRule\",\n    \"StandardsControlArn\": \"arn:aws:securityhub:us-east-1:536600094836:control/aws-foundational-security-best-practices/v/1.0.0/EC2.18\",\n    \"aws/securityhub/ProductName\": \"Security Hub\",\n    \"aws/securityhub/CompanyName\": \"AWS\",\n    \"aws/securityhub/annotation\": \"No tcp ['22'] port is authorized to be open, according to authorizedTcpPorts values ['80,443'] parameter.\",\n    \"Resources:0/Id\": \"arn:aws:ec2:us-east-1:536600094836:security-group/sg-078a4a71c2a7f2e42\",\n    \"aws/securityhub/FindingId\": \"arn:aws:securityhub:us-east-1::product/aws/securityhub/arn:aws:securityhub:us-east-1:536600094836:subscription/aws-foundational-security-best-practices/v/1.0.0/EC2.18/finding/1be6c89a-f11d-4a00-ae28-10a16380bd85\"\n  },\n  \"Resources\": [\n    {\n      \"Type\": \"AwsEc2SecurityGroup\",\n      \"Id\": \"arn:aws:ec2:us-east-1:536600094836:security-group/sg-078a4a71c2a7f2e42\",\n      \"Partition\": \"aws\",\n      \"Region\": \"us-east-1\",\n      \"Details\": {\n        \"AwsEc2SecurityGroup\": {\n          \"GroupName\": \"launch-wizard-1\",\n          \"GroupId\": \"sg-078a4a71c2a7f2e42\",\n          \"OwnerId\": \"536600094836\",\n          \"VpcId\": \"vpc-0667efee3351564be\",\n          \"IpPermissions\": [\n            {\n              \"IpProtocol\": \"tcp\",\n              \"FromPort\": 22,\n              \"ToPort\": 22,\n              \"IpRanges\": [\n                {\n                  \"CidrIp\": \"0.0.0.0/0\"\n                }\n              ]\n            }\n          ],\n          \"IpPermissionsEgress\": [\n            {\n              \"IpProtocol\": \"-1\",\n              \"IpRanges\": [\n                {\n                  \"CidrIp\": \"0.0.0.0/0\"\n                }\n              ]\n            }\n          ]\n        }\n      }\n    }\n  ],\n  \"Compliance\": {\n    \"Status\": \"FAILED\"\n  },\n  \"WorkflowState\": \"NEW\",\n  \"Workflow\": {\n    \"Status\": \"NEW\"\n  },\n  \"RecordState\": \"ACTIVE\",\n  \"FindingProviderFields\": {\n    \"Severity\": {\n      \"Label\": \"HIGH\",\n      \"Original\": \"HIGH\"\n    },\n    \"Types\": [\n      \"Software and Configuration Checks/Industry and Regulatory Standards/AWS-Foundational-Security-Best-Practices\"\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api-gateway-url}}/run?includeInputRequest=false&includeStepOutput=true",
							"host": [
								"{{api-gateway-url}}"
							],
							"path": [
								"run"
							],
							"query": [
								{
									"key": "includeInputRequest",
									"value": "false"
								},
								{
									"key": "includeStepOutput",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{dassana-api-key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "dassana-api-key",
			"value": "7TtxVlHJJs37MkMO4O90r1A2mXdoVekN2iP0SKCg"
		},
		{
			"key": "api-gateway-url",
			"value": "https://vw1iwqwqgf.execute-api.us-east-1.amazonaws.com/v1"
		}
	]
}
